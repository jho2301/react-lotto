{"ast":null,"code":"import _toConsumableArray from\"/home/jho2301/wooteco/lv2/lotto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{nanoid}from'nanoid';import TICKET from'../constants/ticket';import{getRandomNumber}from'../utils/random';var generateTicket=function generateTicket(){var ticketNumbers=new Set();while(ticketNumbers.size<TICKET.NUMBER_LIST_LENGTH){ticketNumbers.add(getRandomNumber(TICKET.MIN_NUMBER,TICKET.MAX_NUMBER));}return{id:nanoid(),numbers:_toConsumableArray(ticketNumbers)};};export var issueTickets=function issueTickets(payment){var ticketCount=Math.floor(payment/TICKET.PRICE);return _toConsumableArray(Array(ticketCount)).map(function(){return generateTicket();});};","map":{"version":3,"sources":["/home/jho2301/wooteco/lv2/lotto/src/services/tickets.ts"],"names":["nanoid","TICKET","getRandomNumber","generateTicket","ticketNumbers","Set","size","NUMBER_LIST_LENGTH","add","MIN_NUMBER","MAX_NUMBER","id","numbers","issueTickets","payment","ticketCount","Math","floor","PRICE","Array","map"],"mappings":"8JAAA,OAASA,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,eAAT,KAAgC,iBAAhC,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAc,CACnC,GAAMC,CAAAA,aAAa,CAAG,GAAIC,CAAAA,GAAJ,EAAtB,CACA,MAAOD,aAAa,CAACE,IAAd,CAAqBL,MAAM,CAACM,kBAAnC,CAAuD,CACrDH,aAAa,CAACI,GAAd,CAAkBN,eAAe,CAACD,MAAM,CAACQ,UAAR,CAAoBR,MAAM,CAACS,UAA3B,CAAjC,EACD,CAED,MAAO,CAAEC,EAAE,CAAEX,MAAM,EAAZ,CAAgBY,OAAO,oBAAMR,aAAN,CAAvB,CAAP,CACD,CAPD,CASA,MAAO,IAAMS,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,CAA+B,CACzD,GAAMC,CAAAA,WAAmB,CAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAGb,MAAM,CAACiB,KAA5B,CAA5B,CAEA,MAAO,oBAAIC,KAAK,CAACJ,WAAD,CAAT,EAAwBK,GAAxB,CAA4B,iBAAMjB,CAAAA,cAAc,EAApB,EAA5B,CAAP,CACD,CAJM","sourcesContent":["import { nanoid } from 'nanoid';\nimport TICKET from '../constants/ticket';\nimport { getRandomNumber } from '../utils/random';\n\nconst generateTicket = (): Ticket => {\n  const ticketNumbers = new Set<number>();\n  while (ticketNumbers.size < TICKET.NUMBER_LIST_LENGTH) {\n    ticketNumbers.add(getRandomNumber(TICKET.MIN_NUMBER, TICKET.MAX_NUMBER));\n  }\n\n  return { id: nanoid(), numbers: [...ticketNumbers] };\n};\n\nexport const issueTickets = (payment: number): Ticket[] => {\n  const ticketCount: number = Math.floor(payment / TICKET.PRICE);\n\n  return [...Array(ticketCount)].map(() => generateTicket());\n};\n"]},"metadata":{},"sourceType":"module"}
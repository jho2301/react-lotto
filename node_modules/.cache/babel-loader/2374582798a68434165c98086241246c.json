{"ast":null,"code":"import{RANK_INDEX,PRIZE}from'../constants/game';var hasBonus=function hasBonus(ticketNumbers,bonus){return ticketNumbers.includes(bonus);};var getRankIndex=function getRankIndex(ticketNumbers,_ref){var numbers=_ref.numbers,bonus=_ref.bonus;var rankIndexMap={6:RANK_INDEX.FIRST,5:hasBonus(ticketNumbers,bonus)?RANK_INDEX.SECOND:RANK_INDEX.THIRD,4:RANK_INDEX.FOURTH,3:RANK_INDEX.FIFTH};var matchCount=ticketNumbers.reduce(function(acc,ticketNumber){return numbers.includes(ticketNumber)?acc+1:acc;},0);return rankIndexMap[matchCount];};export var getWinnerCounts=function getWinnerCounts(tickets,winningNumber){var winnerCounts=new Array(5).fill(0);tickets.forEach(function(_ref2){var numbers=_ref2.numbers;var rankIndex=getRankIndex(numbers,winningNumber);if(rankIndex===undefined)return;winnerCounts[rankIndex]+=1;});return winnerCounts;};export var getTotalProfit=function getTotalProfit(payment,winnerCounts){var income=winnerCounts.reduce(function(acc,winnerCount,index){return acc+winnerCount*PRIZE[index];},0);return(income-payment)/payment*100;};export var GREENWICH_MILLISECONDS=1000*60*60*33;","map":{"version":3,"sources":["/home/jho2301/wooteco/lv2/lotto/src/services/game.ts"],"names":["RANK_INDEX","PRIZE","hasBonus","ticketNumbers","bonus","includes","getRankIndex","numbers","rankIndexMap","FIRST","SECOND","THIRD","FOURTH","FIFTH","matchCount","reduce","acc","ticketNumber","getWinnerCounts","tickets","winningNumber","winnerCounts","Array","fill","forEach","rankIndex","undefined","getTotalProfit","payment","income","winnerCount","index","GREENWICH_MILLISECONDS"],"mappings":"AAAA,OAASA,UAAT,CAA4BC,KAA5B,KAAyC,mBAAzC,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAA0BC,KAA1B,CAAqD,CACpE,MAAOD,CAAAA,aAAa,CAACE,QAAd,CAAuBD,KAAvB,CAAP,CACD,CAFD,CAQA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CACnBH,aADmB,MAGI,IADrBI,CAAAA,OACqB,MADrBA,OACqB,CADZH,KACY,MADZA,KACY,CACvB,GAAMI,CAAAA,YAAmB,CAAG,CAC1B,EAAGR,UAAU,CAACS,KADY,CAE1B,EAAGP,QAAQ,CAACC,aAAD,CAAgBC,KAAhB,CAAR,CAAiCJ,UAAU,CAACU,MAA5C,CAAqDV,UAAU,CAACW,KAFzC,CAG1B,EAAGX,UAAU,CAACY,MAHY,CAI1B,EAAGZ,UAAU,CAACa,KAJY,CAA5B,CAOA,GAAMC,CAAAA,UAAU,CAAGX,aAAa,CAACY,MAAd,CACjB,SAACC,GAAD,CAAMC,YAAN,QAAwBV,CAAAA,OAAO,CAACF,QAAR,CAAiBY,YAAjB,EAAiCD,GAAG,CAAG,CAAvC,CAA2CA,GAAnE,EADiB,CAEjB,CAFiB,CAAnB,CAKA,MAAOR,CAAAA,YAAY,CAACM,UAAD,CAAnB,CACD,CAjBD,CAmBA,MAAO,IAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,OAAD,CAAoBC,aAApB,CAA+D,CAC5F,GAAMC,CAAAA,YAAY,CAAG,GAAIC,CAAAA,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,CAAlB,CAArB,CAEAJ,OAAO,CAACK,OAAR,CAAgB,eAAiB,IAAdjB,CAAAA,OAAc,OAAdA,OAAc,CAC/B,GAAMkB,CAAAA,SAAS,CAAGnB,YAAY,CAACC,OAAD,CAAUa,aAAV,CAA9B,CAEA,GAAIK,SAAS,GAAKC,SAAlB,CAA6B,OAE7BL,YAAY,CAACI,SAAD,CAAZ,EAA2B,CAA3B,CACD,CAND,EAQA,MAAOJ,CAAAA,YAAP,CACD,CAZM,CAcP,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,OAAD,CAAkBP,YAAlB,CAA6C,CACzE,GAAMQ,CAAAA,MAAM,CAAGR,YAAY,CAACN,MAAb,CACb,SAACC,GAAD,CAAMc,WAAN,CAAmBC,KAAnB,QAA6Bf,CAAAA,GAAG,CAAGc,WAAW,CAAG7B,KAAK,CAAC8B,KAAD,CAAtD,EADa,CAEb,CAFa,CAAf,CAKA,MAAQ,CAACF,MAAM,CAAGD,OAAV,EAAqBA,OAAtB,CAAiC,GAAxC,CACD,CAPM,CASP,MAAO,IAAMI,CAAAA,sBAAsB,CAAG,KAAO,EAAP,CAAY,EAAZ,CAAiB,EAAhD","sourcesContent":["import { RANK_INDEX, MATCH, PRIZE } from '../constants/game';\n\nconst hasBonus = (ticketNumbers: number[], bonus: number): boolean => {\n  return ticketNumbers.includes(bonus);\n};\n\ntype Index = {\n  [key: number]: number;\n};\n\nconst getRankIndex = (\n  ticketNumbers: number[],\n  { numbers, bonus }: WinningNumber\n): number | undefined => {\n  const rankIndexMap: Index = {\n    6: RANK_INDEX.FIRST,\n    5: hasBonus(ticketNumbers, bonus) ? RANK_INDEX.SECOND : RANK_INDEX.THIRD,\n    4: RANK_INDEX.FOURTH,\n    3: RANK_INDEX.FIFTH,\n  };\n\n  const matchCount = ticketNumbers.reduce(\n    (acc, ticketNumber) => (numbers.includes(ticketNumber) ? acc + 1 : acc),\n    0\n  );\n\n  return rankIndexMap[matchCount];\n};\n\nexport const getWinnerCounts = (tickets: Ticket[], winningNumber: WinningNumber): number[] => {\n  const winnerCounts = new Array(5).fill(0);\n\n  tickets.forEach(({ numbers }) => {\n    const rankIndex = getRankIndex(numbers, winningNumber);\n\n    if (rankIndex === undefined) return;\n\n    winnerCounts[rankIndex] += 1;\n  });\n\n  return winnerCounts;\n};\n\nexport const getTotalProfit = (payment: number, winnerCounts: number[]) => {\n  const income = winnerCounts.reduce(\n    (acc, winnerCount, index) => acc + winnerCount * PRIZE[index],\n    0\n  );\n\n  return ((income - payment) / payment) * 100;\n};\n\nexport const GREENWICH_MILLISECONDS = 1000 * 60 * 60 * 33;\n"]},"metadata":{},"sourceType":"module"}